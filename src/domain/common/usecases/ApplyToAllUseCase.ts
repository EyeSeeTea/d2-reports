import _ from "lodash";
import { DataValueNumberSingle, DataValueStore, DataValueTextMultiple } from "../entities/DataValue";
import { DataValueRepository, DataElementRefType } from "../repositories/DataValueRepository";
import { Row } from "../../../webapp/reports/autogenerated-forms/GridWithTotalsViewModel";

export class ApplyToAllUseCase {
    constructor(private dataValueRepository: DataValueRepository) {}

    async execute(
        store: DataValueStore,
        dataValue: DataValueTextMultiple,
        __: DataElementRefType[],
        rows: Row[]
    ): Promise<DataValueStore> {
        const onlyRowWithValues = _(rows)
            .map(row => {
                const suma = row.items.reduce((acum, item) => {
                    if (item.dataElement) {
                        const de = store.get(item.dataElement, {
                            period: dataValue.period,
                            orgUnitId: dataValue.orgUnitId,
                            categoryOptionComboId: dataValue.categoryOptionComboId,
                        }) as DataValueNumberSingle;
                        acum += de.value || "";
                    }
                    return acum;
                }, "");
                return suma.length > 0 ? row.items.find(x => x.column.name === "Source Type") : undefined;
            })
            .compact()
            .value();

        let storeWithNewValues = store;
        const sourceTypeToUpdate = _(onlyRowWithValues)
            .map(sourceCol => {
                if (sourceCol.dataElement) {
                    const de = store.get(sourceCol.dataElement, {
                        period: dataValue.period,
                        orgUnitId: dataValue.orgUnitId,
                        categoryOptionComboId: dataValue.categoryOptionComboId,
                    }) as DataValueTextMultiple;
                    de.values = dataValue.values;
                    storeWithNewValues = storeWithNewValues.set(de);
                    return { id: sourceCol.dataElement.id, name: sourceCol.dataElement.name };
                }
                return undefined;
            })
            .compact()
            .value();
        await this.dataValueRepository.applyToAll(dataValue, sourceTypeToUpdate);
        return storeWithNewValues;
    }
}

import fs from "fs";
import path from "path";
import { build } from "./common";
import { inlineSource } from "inline-source";
import { ArgumentParser } from "argparse";

function log(...args: any[]) {
    console.log(...args);
}

export async function convertToInlineReactHtml() {
    const parser = new ArgumentParser({
        description: "Post metadata (report, sql views) to DHIS2 instance",
    });

    parser.add_argument("--skip-build", {
        help: "Skip build process",
        dest: "skipBuild",
        action: "store_true",
    });

    const args = parser.parse_args();

    if (!args.skipBuild) {
        build("autogenerated-forms");
    }

    log(`Read: build/index.html`);
    const html0 = fs.readFileSync("build/index.html", "utf8");

    html0.indexOf("<body>");
    html0.indexOf("</body>");
    const html = html0.slice(html0.indexOf("<body>") + "<body>".length, html0.indexOf("</body>"));
    const html2 = html
        .replaceAll('.js"></script>', '.js" inline></script>')
        .replaceAll('rel="stylesheet">', 'rel="stylesheet" inline>');
    fs.writeFileSync("build/index2.html", html2);

    log(`Inline script/style tags`);
    const html3 = await inlineSource("build/index2.html", {
        compress: true,
        rootpath: path.resolve("build"),
        ignore: ["css", "png"],
    });

    fs.mkdirSync("dist", { recursive: true });
    const dest = "dist/custom-data-form.html";
    log(`Write: ${dest}`);
    fs.writeFileSync(dest, html3);
}

function main() {
    convertToInlineReactHtml();
}

main();

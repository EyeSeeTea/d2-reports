import React from "react";
import {
    DataTable,
    TableHead,
    DataTableRow,
    DataTableColumnHeader,
    TableBody,
    DataTableCell,
    // @ts-ignore
} from "@dhis2/ui";
import { DataFormInfo } from "./AutogeneratedForm";
import { Section } from "../../../domain/common/entities/DataForm";
import { DataElementItem } from "./DataElementItem";
import { makeStyles } from "@material-ui/core";
import DataTableSection from "./DataTableSection";
import { GridWithSubNationalViewModel } from "./GridWithSubNationalViewModel";

export interface GridWithSubNationalProps {
    dataFormInfo: DataFormInfo;
    section: Section;
}

const GridWithSubNational: React.FC<GridWithSubNationalProps> = props => {
    const topValue = "0";
    const { dataFormInfo } = props;
    const grid = React.useMemo(() => GridWithSubNationalViewModel.get(props.section), [props.section]);
    const classes = useStyles();

    return (
        <DataTableSection section={grid} dataFormInfo={dataFormInfo}>
            <DataTable className={classes.table} layout="fixed" width="initial">
                <TableHead>
                    <DataTableRow>
                        <DataTableColumnHeader>SN</DataTableColumnHeader>
                        <DataTableColumnHeader></DataTableColumnHeader>
                        {grid.parentColumns.map((column, index) => {
                            return (
                                <DataTableColumnHeader key={index} className={classes.centerSpan}>
                                    <span>{column.name}</span>
                                </DataTableColumnHeader>
                            );
                        })}
                    </DataTableRow>

                    <DataTableRow>
                        <DataTableColumnHeader fixed top={topValue}>
                            Occupation
                        </DataTableColumnHeader>
                        <DataTableColumnHeader fixed top={topValue}>
                            Subnational level name
                        </DataTableColumnHeader>

                        {grid.columns.map(column => (
                            <DataTableColumnHeader
                                key={`column-${column.name}`}
                                fixed
                                top={topValue}
                                className={
                                    column.name === "Source type for HWF - (Inputs & Outputs)"
                                        ? classes.source
                                        : classes.columnWidth
                                }
                            >
                                <span>{column.cocName}</span>
                            </DataTableColumnHeader>
                        ))}
                    </DataTableRow>
                </TableHead>

                <TableBody>
                    {grid.rows.map((row, idx) => (
                        <DataTableRow key={`policy-${row.name}`}>
                            <DataTableCell fixed left="0" width="90px">
                                Total
                            </DataTableCell>
                            <DataTableCell fixed left="90px" className={classes.td}>
                                <span>{grid.useIndexes ? (idx + 1).toString() : row.name}</span>
                            </DataTableCell>

                            {row.items.map((item, idx) =>
                                item.dataElement ? (
                                    <DataTableCell
                                        key={item.dataElement.orgUnit + item.dataElement.id + item.dataElement.cocId}
                                    >
                                        <DataElementItem
                                            dataElement={item.dataElement}
                                            dataFormInfo={dataFormInfo}
                                            manualyDisabled={item.manualyDisabled}
                                            columnDataElements={item.columnDataElements}
                                            columnTotal={item.columnTotal}
                                            total={item.total}
                                            rowDataElements={item.columnDataElements}
                                            noComment={item.column.name !== "Source type for HWF - (Inputs & Outputs)"}
                                        />
                                    </DataTableCell>
                                ) : (
                                    <DataTableCell key={`cell-${idx}`}></DataTableCell>
                                )
                            )}
                        </DataTableRow>
                    ))}
                </TableBody>
            </DataTable>
        </DataTableSection>
    );
};

const useStyles = makeStyles({
    wrapper: { margin: 10 },
    header: { fontSize: "1.4em", fontWeight: "bold" as const },
    table: { borderWidth: "3px !important", minWidth: "100%" },
    td: { minWidth: "200px !important" },
    columnWidth: { minWidth: "6.2em !important" },
    source: { maxWidth: "35% !important", width: "33% !important", minWidth: "15% !important" },
    centerSpan: {
        "& span": {
            alignItems: "center",
        },
    },
});

export default React.memo(GridWithSubNational);

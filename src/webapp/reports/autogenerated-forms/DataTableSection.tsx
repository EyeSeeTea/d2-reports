import { makeStyles } from "@material-ui/core";
import React from "react";
import { Section } from "../../../domain/common/entities/DataForm";
import { DataValue } from "../../../domain/common/entities/DataValue";
import { useBooleanState } from "../../utils/use-boolean";
import { DataFormInfo } from "./AutogeneratedForm";
import { DataElementItem } from "./DataElementItem";

export interface DataTableProps {
    section: DataTableSectionObj;
    dataFormInfo: DataFormInfo;
    children: React.ReactNode;
}

interface DataTableSectionObj {
    name: string;
    toggle: Section["toggle"];
}

const DataTableSection: React.FC<DataTableProps> = React.memo(props => {
    const { section, children, dataFormInfo } = props;
    const { toggle } = section;
    const classes = useStyles();
    const [isOpen, openActions] = useBooleanState(() => {
        if (toggle.type !== "dataElement") return true;
        const dataValue = dataFormInfo.data.values.getOrEmpty(toggle.dataElement, dataFormInfo);
        return isDataValueEnabled(dataValue);
    });

    const toggleSection = React.useCallback(
        (dataValue: DataValue) => {
            const isOpen = isDataValueEnabled(dataValue);
            openActions.set(isOpen);
        },
        [openActions]
    );

    return (
        <div className={classes.wrapper}>
            <h3 className={classes.title}>{section.name}</h3>

            {toggle.type === "dataElement" && (
                <div className={classes.toggleWrapper}>
                    <div className={classes.toggleTitle}>{toggle.dataElement.name}</div>
                    <DataElementItem
                        dataElement={toggle.dataElement}
                        dataFormInfo={dataFormInfo}
                        onChange={toggleSection}
                    />
                </div>
            )}

            {isOpen && children}
        </div>
    );
});

const useStyles = makeStyles({
    wrapper: { margin: 10, border: "1px solid black" },
    toggleWrapper: { margin: 10 },
    toggleTitle: { marginBottom: 10 },
    title: { textAlign: "center" },
});

function isDataValueEnabled(dataValue: DataValue): boolean {
    return dataValue.type === "BOOLEAN" ? Boolean(dataValue.value) : false;
}

export default React.memo(DataTableSection);

import { makeStyles } from "@material-ui/core";
import React from "react";
import { Section } from "../../../domain/common/entities/DataForm";
import { DataValue } from "../../../domain/common/entities/DataValue";
import { DataFormInfo } from "./AutogeneratedForm";
import { DataElementItem } from "./DataElementItem";
import { Html } from "./Html";

export interface DataTableProps {
    section: DataTableSectionObj;
    dataFormInfo: DataFormInfo;
    children: React.ReactNode;
}

interface DataTableSectionObj {
    name: string;
    titleVariant?: Section["titleVariant"];
    texts: Section["texts"];
    toggle: Section["toggle"];
}

const DataTableSection: React.FC<DataTableProps> = React.memo(props => {
    const { section, children, dataFormInfo } = props;
    const { toggle } = section;
    const classes = useStyles();

    const isSectionOpen = React.useMemo(() => {
        if (toggle.type !== "dataElement") {
            return true;
        } else {
            const dataValue = dataFormInfo.data.values.getOrEmpty(toggle.dataElement, dataFormInfo);
            return isDataValueEnabled(dataValue);
        }
    }, [toggle, dataFormInfo]);

    const titleStyle = section.titleVariant ? `${classes.title} ${classes[section.titleVariant]}` : classes.title;

    return (
        <div className={classes.wrapper}>
            <h3 className={titleStyle}>{section.name}</h3>

            <Html content={section.texts.header} />

            {toggle.type === "dataElement" && (
                <div className={classes.toggleWrapper}>
                    <div className={classes.toggleTitle}>{toggle.dataElement.name}</div>
                    <DataElementItem dataElement={toggle.dataElement} dataFormInfo={dataFormInfo} />
                </div>
            )}

            {isSectionOpen && (
                <>
                    {children}
                    <Html content={section.texts.footer} />
                </>
            )}
        </div>
    );
});

const useStyles = makeStyles({
    wrapper: { margin: 10, border: "1px solid black", overflow: "auto", maxHeight: "100vh" },
    toggleWrapper: { margin: 10 },
    toggleTitle: { marginBottom: 10 },
    title: { textAlign: "center" },
    subtitle: { textAlign: "center", marginBottom: 10 },
    h1: {
        fontSize: "6rem !important",
        margin: "18px !important",
    },
    h2: {
        fontSize: "3.75rem !important",
        margin: "18px !important",
    },
    h3: {
        fontSize: "3rem !important",
        margin: "18px !important",
    },
    h4: {
        fontSize: "2.125rem !important",
        margin: "18px !important",
    },
    h5: {
        fontSize: "1.5rem !important",
        margin: "18px !important",
    },
    h6: {
        fontSize: "1.25rem !important",
        margin: "18px !important",
    },
});

function isDataValueEnabled(dataValue: DataValue): boolean {
    return dataValue.type === "BOOLEAN" ? Boolean(dataValue.value) : false;
}

export default React.memo(DataTableSection);

import _ from "lodash";
import React from "react";
// @ts-ignore
import { MultiSelect, MultiSelectOption, Button } from "@dhis2/ui";
import { Option, DataElement } from "../../../../domain/common/entities/DataElement";
import { WidgetFeedback } from "../WidgetFeedback";
import { DataValueTextMultiple } from "../../../../domain/common/entities/DataValue";
import { WidgetProps } from "./WidgetBase";
import i18n from "../../../../locales";
import { DataElementRefType } from "../../../../domain/common/repositories/DataValueRepository";
import { DataFormInfo } from "../AutogeneratedForm";
import { Row } from "../GridWithTotalsViewModel";

export interface SourceTypeWidgetProps extends WidgetProps {
    dataValue: DataValueTextMultiple;
    dataFormInfo: DataFormInfo;
    options: Option<string>[];
    sourceTypeDEs: DataElementRefType[];
    rowDataElements?: DataElement[];
    rows?: Row[];
}

const SourceTypeWidget: React.FC<SourceTypeWidgetProps> = props => {
    const { onValueChange, disabled, options, dataValue, dataFormInfo, sourceTypeDEs, rows } = props;

    const notifyChange = React.useCallback(
        ({ selected }: { selected: string[] }) => {
            onValueChange({ ...dataValue, values: selected });
        },
        [onValueChange, dataValue]
    );

    const applyToAll = React.useCallback(() => {
        dataFormInfo.data.stApplyToAll(dataValue, sourceTypeDEs, rows || []);
        notifyChange({ selected: dataValue.values });
    }, [dataFormInfo.data, dataValue, notifyChange, sourceTypeDEs, rows]);

    const selectedValues = React.useMemo(
        () => dataValue.values.filter(value => _(options).some(option => option.value === value)),
        [dataValue.values, options]
    );

    return (
        <WidgetFeedback state={props.state}>
            <MultiSelect onChange={notifyChange} selected={selectedValues} disabled={disabled}>
                {options.map(option => (
                    <MultiSelectOption key={option.value} label={option.name} value={option.value} />
                ))}
            </MultiSelect>
            <Button name="applyToAllBtn" onClick={applyToAll} value="default">
                {i18n.t("Apply to all")}
            </Button>
        </WidgetFeedback>
    );
};

export default React.memo(SourceTypeWidget);

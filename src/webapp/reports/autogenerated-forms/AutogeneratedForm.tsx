import React, { useCallback, useEffect, useState } from "react";
import { useAppContext } from "../../contexts/app-context";

import { DataForm, DataFormM } from "../../../domain/common/entities/DataForm";
import { DataValue, DataValueStore, Period } from "../../../domain/common/entities/DataValue";
import { useDataEntrySelector } from "./useDataEntrySelector";
import i18n from "@eyeseetea/d2-ui-components/locales";
import GridForm from "./GridForm";
import { assertUnreachable, Maybe } from "../../../utils/ts-utils";
import { Id } from "../../../domain/common/entities/Base";
import TableForm from "./TableForm";
import { useBooleanState } from "../../utils/use-boolean";
import { LinearProgress } from "@material-ui/core";
import GridWithPeriods from "./GridWithPeriods";
import { Html } from "./Html";

const AutogeneratedForm: React.FC = () => {
    const [dataFormInfo, isLoading] = useDataFormInfo();
    if (!dataFormInfo) return <div>{i18n.t("Loading...")}</div>;
    const { dataForm } = dataFormInfo.metadata;

    if (dataForm.sections.length === 0)
        return <p>{i18n.t("There are no sections in this data set. Check README for more details")}</p>;

    return (
        <div ref={dataFormInfo.initForm}>
            {<LinearProgress style={isLoading ? styles.visible : styles.invisible} />}

            <CommentDialogStyles />

            <Html content={dataForm.texts.header} />

            <div key={dataFormInfo.period}>
                {dataForm.sections.map(section => {
                    const { viewType } = section;
                    switch (viewType) {
                        case "table":
                            return <TableForm key={section.id} dataFormInfo={dataFormInfo} section={section} />;
                        case "grid":
                            return <GridForm key={section.id} dataFormInfo={dataFormInfo} section={section} />;
                        case "grid-with-periods":
                            return <GridWithPeriods key={section.id} dataFormInfo={dataFormInfo} section={section} />;
                        default:
                            assertUnreachable(viewType);
                    }
                })}
            </div>

            <Html content={dataForm.texts.footer} />
        </div>
    );
};

function useDataFormInfo(): [Maybe<DataFormInfo>, boolean] {
    const { compositionRoot } = useAppContext();
    const { orgUnitId, period, dataSetId, reloadKey, initForm } = useDataEntrySelector();
    const [dataForm, setDataForm] = useState<DataForm>();
    const [dataValues, setDataValues] = useState<DataValueStore>();
    const [isLoading, loadingActions] = useBooleanState(false);

    const { config } = useAppContext();

    const defaultCategoryOptionComboId = config.categoryOptionCombos.default.id;

    useEffect(() => {
        compositionRoot.dataForms.get({ dataSetId, period }).then(setDataForm);
    }, [compositionRoot, dataSetId, period]);

    useEffect(() => {
        if (!dataForm) return;

        loadingActions.enable();
        compositionRoot.dataForms
            .getValues(dataForm.id, {
                orgUnitId,
                periods: DataFormM.getReferencedPeriods(dataForm, period),
            })
            .then(dataValues => {
                setDataValues(dataValues);
            })
            .finally(() => {
                loadingActions.disable();
            });
    }, [dataForm, compositionRoot, orgUnitId, period, reloadKey, loadingActions]);

    // Save the data value but don't update dataValues (it re-renders all the form)
    const saveDataValue = useCallback<DataFormInfo["data"]["save"]>(
        async (dataValue: DataValue) => {
            if (!dataValues) return dataValues;
            return compositionRoot.dataForms.saveValue(dataValues, dataValue).then(setDataValues);
        },
        [compositionRoot, dataValues]
    );

    const dataFormInfo: Maybe<DataFormInfo> =
        dataForm && dataValues
            ? {
                  metadata: { dataForm },
                  data: { values: dataValues, save: saveDataValue },
                  initForm,
                  orgUnitId,
                  period,
                  categoryOptionComboId: defaultCategoryOptionComboId,
              }
            : undefined;

    return [dataFormInfo, isLoading];
}

export interface DataFormInfo {
    metadata: { dataForm: DataForm };
    data: {
        values: DataValueStore;
        save: (dataValue: DataValue) => Promise<void>;
    };
    initForm: () => void;
    categoryOptionComboId: Id;
    orgUnitId: Id;
    period: Period;
}

const commentDialogCss = `
    [aria-describedby="historyDiv"] {
        top: 65px !important;
    }
`;

const styles = {
    visible: { opacity: "1" },
    invisible: { opacity: "0" },
};

const CommentDialogStyles: React.FC = () => {
    return <style>{commentDialogCss}</style>;
};

export default React.memo(AutogeneratedForm);

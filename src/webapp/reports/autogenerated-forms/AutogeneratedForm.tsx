import React, { useCallback, useEffect, useState } from "react";
import { useAppContext } from "../../contexts/app-context";

import { DataForm } from "../../../domain/common/entities/DataForm";
import { DataValue, DataValueStore, Period } from "../../../domain/common/entities/DataValue";
import { useDataEntrySelector } from "./useDataEntrySelector";
import i18n from "@eyeseetea/d2-ui-components/locales";
import GridForm from "./GridForm";
import { assertUnreachable, Maybe } from "../../../utils/ts-utils";
import { Id } from "../../../domain/common/entities/Base";
import TableForm from "./TableForm";

const AutogeneratedForm: React.FC = () => {
    const dataFormInfo = useDataFormInfo();
    if (!dataFormInfo) return <div>{i18n.t("Loading...")}</div>;
    const { dataForm } = dataFormInfo.metadata;

    if (dataForm.sections.length === 0)
        return <p>{i18n.t("There are no sections in this data set. Check README for more details")}</p>;

    return (
        <div ref={dataFormInfo.initForm}>
            <CommentDialogStyles />

            <div dangerouslySetInnerHTML={{ __html: dataForm.texts.header }} />

            <div key={dataFormInfo.period}>
                {dataForm.sections.map(section => {
                    switch (section.viewType) {
                        case "grid":
                            return <GridForm key={section.id} dataFormInfo={dataFormInfo} section={section} />;
                        case "table":
                            return <TableForm key={section.id} dataFormInfo={dataFormInfo} section={section} />;
                        default:
                            assertUnreachable(section.viewType);
                    }
                })}
            </div>

            <div dangerouslySetInnerHTML={{ __html: dataForm.texts.footer }} />
        </div>
    );
};

function useDataFormInfo(): Maybe<DataFormInfo> {
    const { compositionRoot } = useAppContext();
    const { orgUnitId, period, dataSetId, reloadKey, initForm } = useDataEntrySelector();
    const [dataForm, setDataForm] = useState<DataForm>();
    const [dataValues, setDataValues] = useState<DataValueStore>();

    const { config } = useAppContext();

    const defaultCategoryOptionComboId = config.categoryOptionCombos.default.id;

    useEffect(() => {
        compositionRoot.dataForms.get(dataSetId).then(setDataForm);
    }, [compositionRoot, dataSetId]);

    useEffect(() => {
        compositionRoot.dataForms.getValues(dataSetId, { orgUnitId, period }).then(setDataValues);
    }, [compositionRoot, orgUnitId, dataSetId, period, reloadKey]);

    // Save the data value but don't update dataValues (it re-renders all the form)
    const saveDataValue = useCallback(
        (dataValue: DataValue) => compositionRoot.dataForms.saveValue(dataValue),
        [compositionRoot]
    );

    return dataForm && dataValues
        ? {
              metadata: { dataForm },
              data: { values: dataValues, save: saveDataValue },
              initForm,
              orgUnitId,
              period,
              categoryOptionComboId: defaultCategoryOptionComboId,
          }
        : undefined;
}

export interface DataFormInfo {
    metadata: { dataForm: DataForm };
    data: {
        values: DataValueStore;
        save: (dataValue: DataValue) => Promise<void>;
    };
    initForm: () => void;
    categoryOptionComboId: Id;
    orgUnitId: Id;
    period: Period;
}

const commentDialogCss = `
    [aria-describedby="historyDiv"] {
        top: 65px !important;
    }
`;

const CommentDialogStyles: React.FC = () => {
    return <style dangerouslySetInnerHTML={{ __html: commentDialogCss }} />;
};

export default React.memo(AutogeneratedForm);
